@test "simple expression" {
    run redis-cli EVALJS "return 41 + 1" 0
    [ "$status" -eq 0 ]
    [ "$output" = "42" ]
}

@test "output string" {
    run redis-cli EVALJS "return 'hello!'" 0
    [ "$status" -eq 0 ]
    [ "$output" = "hello!" ]
}

@test "output integer" {
    run redis-cli EVALJS "return 42" 0
    [ "$status" -eq 0 ]
    [ "$output" = 42 ]
}

@test "output float" {
    run redis-cli EVALJS "return 3.14" 0
    [ "$status" -eq 0 ]
    [ "$output" = 3.14 ]
}

@test "output null, undefined as null" {
    function t() {
        run redis-cli EVALJS "$@" 0
        [ "$status" -eq 0 ]
        [ "$output" = "" ]
    }

    t "return null"
    t "return undefined"
}

@test "unknown, uninitialized throws exception" {
    function t() {
        run redis-cli EVALJS "$@" 0
        echo "output: '$output'"
        [ "$status" -eq 0 ]
        [ "$output" = "Exception generated by QuickJS" ]
    }

    t "return uninitialized"
    t "return unknown"
}

@test "evaluate function" {
    run redis-cli EVALJS "const f = (a, b) => a*b; return f(2, 3)" 0
    [ "$status" -eq 0 ]
    [ "$output" = "6" ]
}

@test "evaluate array" {
    want=$(cat <<EOF
1
2
3
EOF
)
    run redis-cli EVALJS "return [3, 2, 1].sort((a, b) => a - b)" 0
    [ "$status" -eq 0 ]
    [ "$output" = "$want" ]
}

@test "argv and keys" {
    want=$(cat <<EOF
key1
key2
arg1
arg2
arg3
EOF
)
    run redis-cli EVALJS "return [KEYS[0], KEYS[1], ARGV[0], ARGV[1], ARGV[2]]" 2 key1 key2 arg1 arg2 arg3
    [ "$status" -eq 0 ]
    [ "$output" = "$want" ]
}

@test "redis.call" {
    run redis-cli EVALJS "return redis.call('SET', 'a', 42)" 0
    [ "$status" -eq 0 ]
    [ "$output" = "OK" ]

    run redis-cli EVALJS "return redis.call('GET', 'a')" 0
    [ "$status" -eq 0 ]
    [ "$output" = "42" ]
}